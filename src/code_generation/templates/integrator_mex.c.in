#include "mex.h"
#define NUM_OUTPUTS @NUM_OUTPUTS@

/* GLOBAL VARIABLES FOR THE ACADO REAL-TIME ALGORITHM: */
/* --------------------------------------------------- */
   ACADOvariables acadoVariables;
   ACADOworkspace acadoWorkspace;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {
    
    int i, j, k, N;
    real_t *x, *xnext, *sensX, *sensU;
    real_t next[ACADO_NX*(1+ACADO_NX+ACADO_NU)+ACADO_NU];
    const char *fieldnames[3];  
    
    #if NUM_OUTPUTS > 0
        int NMeas[NUM_OUTPUTS];
        int dimOutputs[NUM_OUTPUTS];
        NMeas[0] = ACADO_NMEAS1;
        dimOutputs[0] = ACADO_NOUT1;
        real_t out1[NMeas[0]*dimOutputs[0]*(1+ACADO_NX+ACADO_NU)];
        
        #if NUM_OUTPUTS > 1
            NMeas[1] = ACADO_NMEAS2;
            dimOutputs[1] = ACADO_NOUT2;
            real_t out2[NMeas[1]*dimOutputs[1]*(1+ACADO_NX+ACADO_NU)];
            
            #if NUM_OUTPUTS > 2
                NMeas[2] = ACADO_NMEAS3;
                dimOutputs[2] = ACADO_NOUT3;
                real_t out3[NMeas[2]*dimOutputs[2]*(1+ACADO_NX+ACADO_NU)];
                
                #if NUM_OUTPUTS > 3
                    NMeas[3] = ACADO_NMEAS4;
                    dimOutputs[3] = ACADO_NOUT4;
                    real_t out4[NMeas[3]*dimOutputs[3]*(1+ACADO_NX+ACADO_NU)];
                #endif
            #endif
        #endif
    #endif       
                        
    fieldnames[0] = "value";  
    fieldnames[1] = "sensX";  
    fieldnames[2] = "sensU"; 
    
    N = mxGetM(prhs[0])*mxGetN(prhs[0]);
    
    if (nrhs != 1) {
        mexErrMsgTxt( "Check the number of input arguments !" );
    }
    if (nlhs > (1+NUM_OUTPUTS)) {
        mexErrMsgTxt( "Check the number of output arguments !" );
    }
    if (N != ACADO_NX+ACADO_NU) {
        mexErrMsgTxt( "Check the dimension of the input argument !" );
    }
    
    x = mxGetPr(prhs[0]);
    
    for( i = 0; i < ACADO_NX; ++i ) {
        next[i] = x[i];
    }
    for( i = 0; i < ACADO_NU; ++i ) {
        next[ACADO_NX*(1+ACADO_NX+ACADO_NU)+i] = x[ACADO_NX+i];
    }
    
    #if NUM_OUTPUTS > 3
        integrate( next, out1, out2, out3, out4 );
    #elif NUM_OUTPUTS > 2
        integrate( next, out1, out2, out3 );
    #elif NUM_OUTPUTS > 1
        integrate( next, out1, out2 );
    #elif NUM_OUTPUTS > 0
        integrate( next, out1 );
    #else 
        integrate( next );
    #endif
    
    plhs[0] = mxCreateStructMatrix(1, 1, 3, fieldnames);
    mxSetField(plhs[0],0,fieldnames[0],mxCreateDoubleMatrix(ACADO_NX,1,mxREAL));
    mxSetField(plhs[0],0,fieldnames[1],mxCreateDoubleMatrix(ACADO_NX,ACADO_NX,mxREAL));
    mxSetField(plhs[0],0,fieldnames[2],mxCreateDoubleMatrix(ACADO_NX,ACADO_NU,mxREAL));
    
    xnext = mxGetPr(mxGetField(plhs[0],0,fieldnames[0]));
    sensX = mxGetPr(mxGetField(plhs[0],0,fieldnames[1]));
    sensU = mxGetPr(mxGetField(plhs[0],0,fieldnames[2]));
    
    for( i = 0; i < ACADO_NX; ++i ) {
        xnext[i] = next[i];
    }
    
    /* NOTE: Matlab is column-major, while C is row-major order !! */
    for( i = 0; i < ACADO_NX; ++i ) {
        for( j = 0; j < ACADO_NX; ++j ) {
            sensX[j*ACADO_NX+i] = next[ACADO_NX+i*ACADO_NX+j];
        }
    }
    for( i = 0; i < ACADO_NX; ++i ) {
        for( j = 0; j < ACADO_NU; ++j ) {
            sensU[j*ACADO_NX+i] = next[ACADO_NX*(1+ACADO_NX)+i*ACADO_NU+j];
        }
    }
    
    #if NUM_OUTPUTS > 0
    if (nlhs > 1) {
        plhs[1] = mxCreateStructMatrix(1, 1, 3, fieldnames);
        mxSetField(plhs[1],0,fieldnames[0],mxCreateDoubleMatrix(dimOutputs[0],NMeas[0],mxREAL));
        mxSetField(plhs[1],0,fieldnames[1],mxCreateDoubleMatrix(dimOutputs[0]*NMeas[0],ACADO_NX,mxREAL));
        mxSetField(plhs[1],0,fieldnames[2],mxCreateDoubleMatrix(dimOutputs[0]*NMeas[0],ACADO_NU,mxREAL));
        
        xnext = mxGetPr(mxGetField(plhs[1],0,fieldnames[0]));
        sensX = mxGetPr(mxGetField(plhs[1],0,fieldnames[1]));
        sensU = mxGetPr(mxGetField(plhs[1],0,fieldnames[2]));
        
        for( k = 0; k < NMeas[0]; ++k ) {
            for( i = 0; i < dimOutputs[0]; ++i ) {
                xnext[k*dimOutputs[0]+i] = out1[k*dimOutputs[0]*(1+ACADO_NX+ACADO_NU)+i];
            }
        }
        
        /* NOTE: Matlab is column-major, while C is row-major order !! */
        for( k = 0; k < NMeas[0]; ++k ) {
            for( i = 0; i < dimOutputs[0]; ++i ) {
                for( j = 0; j < ACADO_NX; ++j ) {
                    sensX[j*dimOutputs[0]*NMeas[0]+k*dimOutputs[0]+i] = out1[k*dimOutputs[0]*(1+ACADO_NX+ACADO_NU)+dimOutputs[0]+i*ACADO_NX+j];
                }
            }
        }
        for( k = 0; k < NMeas[0]; ++k ) {
            for( i = 0; i < dimOutputs[0]; ++i ) {
                for( j = 0; j < ACADO_NU; ++j ) {
                    sensU[j*dimOutputs[0]*NMeas[0]+k*dimOutputs[0]+i] = out1[k*dimOutputs[0]*(1+ACADO_NX+ACADO_NU)+dimOutputs[0]*(1+ACADO_NX)+i*ACADO_NU+j];
                }
            }
        }
        #if NUM_OUTPUTS > 1
        if (nlhs > 2) {
            plhs[2] = mxCreateStructMatrix(1, 1, 3, fieldnames);
            mxSetField(plhs[2],0,fieldnames[0],mxCreateDoubleMatrix(dimOutputs[1],NMeas[1],mxREAL));
            mxSetField(plhs[2],0,fieldnames[1],mxCreateDoubleMatrix(dimOutputs[1]*NMeas[1],ACADO_NX,mxREAL));
            mxSetField(plhs[2],0,fieldnames[2],mxCreateDoubleMatrix(dimOutputs[1]*NMeas[1],ACADO_NU,mxREAL));

            xnext = mxGetPr(mxGetField(plhs[2],0,fieldnames[0]));
            sensX = mxGetPr(mxGetField(plhs[2],0,fieldnames[1]));
            sensU = mxGetPr(mxGetField(plhs[2],0,fieldnames[2]));

            for( k = 0; k < NMeas[1]; ++k ) {
                for( i = 0; i < dimOutputs[1]; ++i ) {
                    xnext[k*dimOutputs[1]+i] = out2[k*dimOutputs[1]*(1+ACADO_NX+ACADO_NU)+i];
                }
            }

            /* NOTE: Matlab is column-major, while C is row-major order !! */
            for( k = 0; k < NMeas[1]; ++k ) {
                for( i = 0; i < dimOutputs[1]; ++i ) {
                    for( j = 0; j < ACADO_NX; ++j ) {
                        sensX[j*dimOutputs[1]*NMeas[1]+k*dimOutputs[1]+i] = out2[k*dimOutputs[1]*(1+ACADO_NX+ACADO_NU)+dimOutputs[1]+i*ACADO_NX+j];
                    }
                }
            }
            for( k = 0; k < NMeas[1]; ++k ) {
                for( i = 0; i < dimOutputs[1]; ++i ) {
                    for( j = 0; j < ACADO_NU; ++j ) {
                        sensU[j*dimOutputs[1]*NMeas[1]+k*dimOutputs[1]+i] = out2[k*dimOutputs[1]*(1+ACADO_NX+ACADO_NU)+dimOutputs[1]*(1+ACADO_NX)+i*ACADO_NU+j];
                    }
                }
            }
            #if NUM_OUTPUTS > 2
            if (nlhs > 3) {
                plhs[3] = mxCreateStructMatrix(1, 1, 3, fieldnames);
                mxSetField(plhs[3],0,fieldnames[0],mxCreateDoubleMatrix(dimOutputs[2],NMeas[2],mxREAL));
                mxSetField(plhs[3],0,fieldnames[1],mxCreateDoubleMatrix(dimOutputs[2]*NMeas[2],ACADO_NX,mxREAL));
                mxSetField(plhs[3],0,fieldnames[2],mxCreateDoubleMatrix(dimOutputs[2]*NMeas[2],ACADO_NU,mxREAL));

                xnext = mxGetPr(mxGetField(plhs[3],0,fieldnames[0]));
                sensX = mxGetPr(mxGetField(plhs[3],0,fieldnames[1]));
                sensU = mxGetPr(mxGetField(plhs[3],0,fieldnames[2]));

                for( k = 0; k < NMeas[2]; ++k ) {
                    for( i = 0; i < dimOutputs[2]; ++i ) {
                        xnext[k*dimOutputs[2]+i] = out3[k*dimOutputs[2]*(1+ACADO_NX+ACADO_NU)+i];
                    }
                }

                /* NOTE: Matlab is column-major, while C is row-major order !! */
                for( k = 0; k < NMeas[2]; ++k ) {
                    for( i = 0; i < dimOutputs[2]; ++i ) {
                        for( j = 0; j < ACADO_NX; ++j ) {
                            sensX[j*dimOutputs[2]*NMeas[2]+k*dimOutputs[2]+i] = out3[k*dimOutputs[2]*(1+ACADO_NX+ACADO_NU)+dimOutputs[2]+i*ACADO_NX+j];
                        }
                    }
                }
                for( k = 0; k < NMeas[2]; ++k ) {
                    for( i = 0; i < dimOutputs[2]; ++i ) {
                        for( j = 0; j < ACADO_NU; ++j ) {
                            sensU[j*dimOutputs[2]*NMeas[2]+k*dimOutputs[2]+i] = out3[k*dimOutputs[2]*(1+ACADO_NX+ACADO_NU)+dimOutputs[2]*(1+ACADO_NX)+i*ACADO_NU+j];
                        }
                    }
                }
                #if NUM_OUTPUTS > 3
                if (nlhs > 4) {
                    plhs[4] = mxCreateStructMatrix(1, 1, 3, fieldnames);
                    mxSetField(plhs[4],0,fieldnames[0],mxCreateDoubleMatrix(dimOutputs[3],NMeas[3],mxREAL));
                    mxSetField(plhs[4],0,fieldnames[1],mxCreateDoubleMatrix(dimOutputs[3]*NMeas[3],ACADO_NX,mxREAL));
                    mxSetField(plhs[4],0,fieldnames[2],mxCreateDoubleMatrix(dimOutputs[3]*NMeas[3],ACADO_NU,mxREAL));

                    xnext = mxGetPr(mxGetField(plhs[4],0,fieldnames[0]));
                    sensX = mxGetPr(mxGetField(plhs[4],0,fieldnames[1]));
                    sensU = mxGetPr(mxGetField(plhs[4],0,fieldnames[2]));

                    for( k = 0; k < NMeas[3]; ++k ) {
                        for( i = 0; i < dimOutputs[3]; ++i ) {
                            xnext[k*dimOutputs[3]+i] = out4[k*dimOutputs[3]*(1+ACADO_NX+ACADO_NU)+i];
                        }
                    }

                    /* NOTE: Matlab is column-major, while C is row-major order !! */
                    for( k = 0; k < NMeas[3]; ++k ) {
                        for( i = 0; i < dimOutputs[3]; ++i ) {
                            for( j = 0; j < ACADO_NX; ++j ) {
                                sensX[j*dimOutputs[3]*NMeas[3]+k*dimOutputs[3]+i] = out4[k*dimOutputs[3]*(1+ACADO_NX+ACADO_NU)+dimOutputs[3]+i*ACADO_NX+j];
                            }
                        }
                    }
                    for( k = 0; k < NMeas[3]; ++k ) {
                        for( i = 0; i < dimOutputs[3]; ++i ) {
                            for( j = 0; j < ACADO_NU; ++j ) {
                                sensU[j*dimOutputs[3]*NMeas[3]+k*dimOutputs[3]+i] = out4[k*dimOutputs[3]*(1+ACADO_NX+ACADO_NU)+dimOutputs[3]*(1+ACADO_NX)+i*ACADO_NU+j];
                            }
                        }
                    }
                }
                #endif
            }
            #endif
        }
        #endif
    }
    #endif
}
