#include "mex.h"
#include "acado.h"

/* GLOBAL VARIABLES FOR THE ACADO REAL-TIME ALGORITHM: */
/* --------------------------------------------------- */
   ACADOvariables acadoVariables;
   ACADOworkspace acadoWorkspace;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {
    
    int i, N;
    real_t *x, *xnext, *sensX, *sensU;
    real_t next[ACADO_NX*(1+ACADO_NX+ACADO_NU)+ACADO_NU];
    
    N = mxGetM(prhs[0])*mxGetN(prhs[0]);
    
    if (nrhs != 1) {
        mexErrMsgTxt( "Check the number of input arguments !" );
    }
    if (nlhs > 1 && nlhs != 3) {
        mexErrMsgTxt( "Check the number of output arguments !" );
    }
    if (N != ACADO_NX+ACADO_NU) {
        mexErrMsgTxt( "Check the dimension of the input argument !" );
    }
    
    x = mxGetPr(prhs[0]);
    
    for( i = 0; i < ACADO_NX; ++i ) {
        next[i] = x[i];
    }
    for( i = 0; i < ACADO_NU; ++i ) {
        next[ACADO_NX*(1+ACADO_NX+ACADO_NU)+i] = x[ACADO_NX+i];
    }
    
    integrate( next );
    
    plhs[0] = mxCreateDoubleMatrix(ACADO_NX,1,mxREAL);
    if (nlhs > 1) {
        plhs[1] = mxCreateDoubleMatrix(ACADO_NX,ACADO_NX,mxREAL);
        plhs[2] = mxCreateDoubleMatrix(ACADO_NU,ACADO_NX,mxREAL);
    }
    xnext = mxGetPr(plhs[0]);
    if (nlhs > 1) {
        sensX = mxGetPr(plhs[1]);
        sensU = mxGetPr(plhs[2]);
    }
    
    for( i = 0; i < ACADO_NX; ++i ) {
        xnext[i] = next[i];
    }
    if (nlhs > 1) {
    	for( i = 0; i < ACADO_NX*ACADO_NX; ++i ) {
        	sensX[i] = next[ACADO_NX+i];
    	}
    	for( i = 0; i < ACADO_NX*ACADO_NU; ++i ) {
        	sensU[i] = next[ACADO_NX+ACADO_NX*ACADO_NX+i];
    	}
    }
}
