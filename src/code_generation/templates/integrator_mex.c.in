#include "mex.h"
#define ONLINE_GRID @ONLINE_GRID@
#define DEBUG_MODE @DEBUG_MODE@
#define NUM_STAGES @NUM_STAGES@

/* GLOBAL VARIABLES FOR THE ACADO REAL-TIME ALGORITHM: */
/* --------------------------------------------------- */
   ACADOvariables acadoVariables;
   ACADOworkspace acadoWorkspace;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {
    
    int i, j, k, Nx, Nu, gridI, Ngrid;
    real_t *x, *u, *xnext, *sensX, *sensU, *grid, *mat;
    real_t next[(ACADO_NX+ACADO_NXA)*(1+ACADO_NX+ACADO_NU)+ACADO_NU];
    const char *fieldnames[3];  
    
    #if NUM_OUTPUTS > 0
        real_t out1[NMEAS[0]*NOUT[0]*(1+ACADO_NX+ACADO_NU)];
        
        #if NUM_OUTPUTS > 1
            real_t out2[NMEAS[1]*NOUT[1]*(1+ACADO_NX+ACADO_NU)];
            
            #if NUM_OUTPUTS > 2
                real_t out3[NMEAS[2]*NOUT[2]*(1+ACADO_NX+ACADO_NU)];
                
                #if NUM_OUTPUTS > 3
                    real_t out4[NMEAS[3]*NOUT[3]*(1+ACADO_NX+ACADO_NU)];
                #endif
            #endif
        #endif
    #endif       
                        
    fieldnames[0] = "value";  
    fieldnames[1] = "sensX";  
    fieldnames[2] = "sensU"; 
    
    if (nrhs != (2+ONLINE_GRID*NUM_OUTPUTS) && !(nrhs == (1+ONLINE_GRID*NUM_OUTPUTS) && ACADO_NU == 0)) {
        if( ONLINE_GRID ) {
mexErrMsgTxt( "Check the number of input arguments: since the ONLINE_GRID option is used, a grid needs to be provided for every output function !" );
        }
        else {
mexErrMsgTxt( "Check the number of input arguments !" );
        }
    }
    if (nlhs > (1+NUM_OUTPUTS+DEBUG_MODE)) {
        mexErrMsgTxt( "Check the number of output arguments !" );
    }
    
    Nx = mxGetM(prhs[0])*mxGetN(prhs[0]);
    if (ACADO_NU > 0) {
        Nu = mxGetM(prhs[1])*mxGetN(prhs[1]);
        gridI = 2;
    }
    else {
        Nu = 0;
        gridI = 1;
    }
    
    if (Nx != ACADO_NX+ACADO_NXA) {
        mexErrMsgTxt( "Check the dimension of the first input argument !" );
    }
    if (Nu != ACADO_NU) {
        mexErrMsgTxt( "Check the dimension of the second input argument !" );
    }
    #if ONLINE_GRID
#if NUM_OUTPUTS > 0
Ngrid = mxGetM(prhs[gridI])*mxGetN(prhs[gridI]);
grid = mxGetPr(prhs[gridI]);
if( Ngrid > NMEAS[0] ) {
mexErrMsgTxt( "The first provided grid contains too many points, adjust the corresponding maximum number of measurements !" );
}
else {
for( j = 0; j < Ngrid; ++j ) {
acadoVariables.gridOutput0[j] = grid[j];
}
for( j = Ngrid; j < NMEAS[0]; ++j ) {
acadoVariables.gridOutput0[j] = 1.1;
}
}
        
#if NUM_OUTPUTS > 1
Ngrid = mxGetM(prhs[gridI+1])*mxGetN(prhs[gridI+1]);
grid = mxGetPr(prhs[gridI+1]);
if( Ngrid > NMEAS[1] ) {
mexErrMsgTxt( "The second provided grid contains too many points, adjust the corresponding maximum number of measurements !" );
}
else {
for( j = 0; j < Ngrid; ++j ) {
acadoVariables.gridOutput1[j] = grid[j];
}
for( j = Ngrid; j < NMEAS[1]; ++j ) {
acadoVariables.gridOutput1[j] = 1.1;
}
}
            
#if NUM_OUTPUTS > 2
Ngrid = mxGetM(prhs[gridI+2])*mxGetN(prhs[gridI+2]);
grid = mxGetPr(prhs[gridI+2]);
if( Ngrid > NMEAS[2] ) {
mexErrMsgTxt( "The third provided grid contains too many points, adjust the corresponding maximum number of measurements !" );
}
else {
for( j = 0; j < Ngrid; ++j ) {
acadoVariables.gridOutput2[j] = grid[j];
}
for( j = Ngrid; j < NMEAS[2]; ++j ) {
acadoVariables.gridOutput2[j] = 1.1;
}
}
                
#if NUM_OUTPUTS > 3
Ngrid = mxGetM(prhs[gridI+3])*mxGetN(prhs[gridI+3]);
grid = mxGetPr(prhs[gridI+3]);
if( Ngrid > NMEAS[3] ) {
mexErrMsgTxt( "The fourth provided grid contains too many points, adjust the corresponding maximum number of measurements !" );
}
else {
for( j = 0; j < Ngrid; ++j ) {
acadoVariables.gridOutput3[j] = grid[j];
}
for( j = Ngrid; j < NMEAS[3]; ++j ) {
acadoVariables.gridOutput3[j] = 1.1;
}
}
#endif
#endif
#endif
#endif  
    #endif       
    
    x = mxGetPr(prhs[0]);
    if (ACADO_NU > 0) {
        u = mxGetPr(prhs[1]);
    }
    
    for( i = 0; i < ACADO_NX+ACADO_NXA; ++i ) {
        next[i] = x[i];
    }
    for( i = 0; i < ACADO_NU; ++i ) {
        next[(ACADO_NX+ACADO_NXA)*(1+ACADO_NX+ACADO_NU)+i] = u[i];
    }

    acadoVariables.resetIntegrator = 1;
    
    #if NUM_OUTPUTS > 3
        integrate( next, out1, out2, out3, out4 );
    #elif NUM_OUTPUTS > 2
        integrate( next, out1, out2, out3 );
    #elif NUM_OUTPUTS > 1
        integrate( next, out1, out2 );
    #elif NUM_OUTPUTS > 0
        integrate( next, out1 );
    #else 
        integrate( next );
    #endif
    
    plhs[0] = mxCreateStructMatrix(1, 1, 3, fieldnames);
    mxSetField(plhs[0],0,fieldnames[0],mxCreateDoubleMatrix(ACADO_NX+ACADO_NXA,1,mxREAL));
    mxSetField(plhs[0],0,fieldnames[1],mxCreateDoubleMatrix(ACADO_NX+ACADO_NXA,ACADO_NX,mxREAL));
    mxSetField(plhs[0],0,fieldnames[2],mxCreateDoubleMatrix(ACADO_NX+ACADO_NXA,ACADO_NU,mxREAL));
    
    xnext = mxGetPr(mxGetField(plhs[0],0,fieldnames[0]));
    sensX = mxGetPr(mxGetField(plhs[0],0,fieldnames[1]));
    sensU = mxGetPr(mxGetField(plhs[0],0,fieldnames[2]));
    
    for( i = 0; i < ACADO_NX+ACADO_NXA; ++i ) {
        xnext[i] = next[i];
    }
    
    /* NOTE: Matlab is column-major, while C is row-major order !! */
    for( i = 0; i < ACADO_NX+ACADO_NXA; ++i ) {
        for( j = 0; j < ACADO_NX; ++j ) {
            sensX[j*(ACADO_NX+ACADO_NXA)+i] = next[ACADO_NX+ACADO_NXA+i*ACADO_NX+j];
        }
    }
    for( i = 0; i < ACADO_NX+ACADO_NXA; ++i ) {
        for( j = 0; j < ACADO_NU; ++j ) {
            sensU[j*(ACADO_NX+ACADO_NXA)+i] = next[(ACADO_NX+ACADO_NXA)*(1+ACADO_NX)+i*ACADO_NU+j];
        }
    }
    
    #if DEBUG_MODE > 0
    if (nlhs > 1+NUM_OUTPUTS) {
		plhs[1+NUM_OUTPUTS] = mxCreateDoubleMatrix(NUM_STAGES*(ACADO_NX+ACADO_NXA),NUM_STAGES*(ACADO_NX+ACADO_NXA),mxREAL);
		mat = mxGetPr(plhs[1+NUM_OUTPUTS]);
		for( i = 0; i < NUM_STAGES*(ACADO_NX+ACADO_NXA); ++i ) {
            for( j = 0; j < NUM_STAGES*(ACADO_NX+ACADO_NXA); ++j ) {
                mat[j*NUM_STAGES*(ACADO_NX+ACADO_NXA)+i] = acadoVariables.debug_mat[i*NUM_STAGES*(ACADO_NX+ACADO_NXA)+j];
            }
        }
    }
    #endif
    
    #if NUM_OUTPUTS > 0
    if (nlhs > 1) {
        plhs[1] = mxCreateStructMatrix(1, 1, 3, fieldnames);
        mxSetField(plhs[1],0,fieldnames[0],mxCreateDoubleMatrix(NOUT[0],NMEAS[0],mxREAL));
        mxSetField(plhs[1],0,fieldnames[1],mxCreateDoubleMatrix(NOUT[0]*NMEAS[0],ACADO_NX,mxREAL));
        mxSetField(plhs[1],0,fieldnames[2],mxCreateDoubleMatrix(NOUT[0]*NMEAS[0],ACADO_NU,mxREAL));
        
        xnext = mxGetPr(mxGetField(plhs[1],0,fieldnames[0]));
        sensX = mxGetPr(mxGetField(plhs[1],0,fieldnames[1]));
        sensU = mxGetPr(mxGetField(plhs[1],0,fieldnames[2]));
        
        for( k = 0; k < NMEAS[0]; ++k ) {
            for( i = 0; i < NOUT[0]; ++i ) {
                xnext[k*NOUT[0]+i] = out1[k*NOUT[0]*(1+ACADO_NX+ACADO_NU)+i];
            }
        }
        
        /* NOTE: Matlab is column-major, while C is row-major order !! */
        for( k = 0; k < NMEAS[0]; ++k ) {
            for( i = 0; i < NOUT[0]; ++i ) {
                for( j = 0; j < ACADO_NX; ++j ) {
                    sensX[j*NOUT[0]*NMEAS[0]+k*NOUT[0]+i] = out1[k*NOUT[0]*(1+ACADO_NX+ACADO_NU)+NOUT[0]+i*ACADO_NX+j];
                }
            }
        }
        for( k = 0; k < NMEAS[0]; ++k ) {
            for( i = 0; i < NOUT[0]; ++i ) {
                for( j = 0; j < ACADO_NU; ++j ) {
                    sensU[j*NOUT[0]*NMEAS[0]+k*NOUT[0]+i] = out1[k*NOUT[0]*(1+ACADO_NX+ACADO_NU)+NOUT[0]*(1+ACADO_NX)+i*ACADO_NU+j];
                }
            }
        }
        #if NUM_OUTPUTS > 1
        if (nlhs > 2) {
            plhs[2] = mxCreateStructMatrix(1, 1, 3, fieldnames);
            mxSetField(plhs[2],0,fieldnames[0],mxCreateDoubleMatrix(NOUT[1],NMEAS[1],mxREAL));
            mxSetField(plhs[2],0,fieldnames[1],mxCreateDoubleMatrix(NOUT[1]*NMEAS[1],ACADO_NX,mxREAL));
            mxSetField(plhs[2],0,fieldnames[2],mxCreateDoubleMatrix(NOUT[1]*NMEAS[1],ACADO_NU,mxREAL));

            xnext = mxGetPr(mxGetField(plhs[2],0,fieldnames[0]));
            sensX = mxGetPr(mxGetField(plhs[2],0,fieldnames[1]));
            sensU = mxGetPr(mxGetField(plhs[2],0,fieldnames[2]));

            for( k = 0; k < NMEAS[1]; ++k ) {
                for( i = 0; i < NOUT[1]; ++i ) {
                    xnext[k*NOUT[1]+i] = out2[k*NOUT[1]*(1+ACADO_NX+ACADO_NU)+i];
                }
            }

            /* NOTE: Matlab is column-major, while C is row-major order !! */
            for( k = 0; k < NMEAS[1]; ++k ) {
                for( i = 0; i < NOUT[1]; ++i ) {
                    for( j = 0; j < ACADO_NX; ++j ) {
                        sensX[j*NOUT[1]*NMEAS[1]+k*NOUT[1]+i] = out2[k*NOUT[1]*(1+ACADO_NX+ACADO_NU)+NOUT[1]+i*ACADO_NX+j];
                    }
                }
            }
            for( k = 0; k < NMEAS[1]; ++k ) {
                for( i = 0; i < NOUT[1]; ++i ) {
                    for( j = 0; j < ACADO_NU; ++j ) {
                        sensU[j*NOUT[1]*NMEAS[1]+k*NOUT[1]+i] = out2[k*NOUT[1]*(1+ACADO_NX+ACADO_NU)+NOUT[1]*(1+ACADO_NX)+i*ACADO_NU+j];
                    }
                }
            }
            #if NUM_OUTPUTS > 2
            if (nlhs > 3) {
                plhs[3] = mxCreateStructMatrix(1, 1, 3, fieldnames);
                mxSetField(plhs[3],0,fieldnames[0],mxCreateDoubleMatrix(NOUT[2],NMEAS[2],mxREAL));
                mxSetField(plhs[3],0,fieldnames[1],mxCreateDoubleMatrix(NOUT[2]*NMEAS[2],ACADO_NX,mxREAL));
                mxSetField(plhs[3],0,fieldnames[2],mxCreateDoubleMatrix(NOUT[2]*NMEAS[2],ACADO_NU,mxREAL));

                xnext = mxGetPr(mxGetField(plhs[3],0,fieldnames[0]));
                sensX = mxGetPr(mxGetField(plhs[3],0,fieldnames[1]));
                sensU = mxGetPr(mxGetField(plhs[3],0,fieldnames[2]));

                for( k = 0; k < NMEAS[2]; ++k ) {
                    for( i = 0; i < NOUT[2]; ++i ) {
                        xnext[k*NOUT[2]+i] = out3[k*NOUT[2]*(1+ACADO_NX+ACADO_NU)+i];
                    }
                }

                /* NOTE: Matlab is column-major, while C is row-major order !! */
                for( k = 0; k < NMEAS[2]; ++k ) {
                    for( i = 0; i < NOUT[2]; ++i ) {
                        for( j = 0; j < ACADO_NX; ++j ) {
                            sensX[j*NOUT[2]*NMEAS[2]+k*NOUT[2]+i] = out3[k*NOUT[2]*(1+ACADO_NX+ACADO_NU)+NOUT[2]+i*ACADO_NX+j];
                        }
                    }
                }
                for( k = 0; k < NMEAS[2]; ++k ) {
                    for( i = 0; i < NOUT[2]; ++i ) {
                        for( j = 0; j < ACADO_NU; ++j ) {
                            sensU[j*NOUT[2]*NMEAS[2]+k*NOUT[2]+i] = out3[k*NOUT[2]*(1+ACADO_NX+ACADO_NU)+NOUT[2]*(1+ACADO_NX)+i*ACADO_NU+j];
                        }
                    }
                }
                #if NUM_OUTPUTS > 3
                if (nlhs > 4) {
                    plhs[4] = mxCreateStructMatrix(1, 1, 3, fieldnames);
                    mxSetField(plhs[4],0,fieldnames[0],mxCreateDoubleMatrix(NOUT[3],NMEAS[3],mxREAL));
                    mxSetField(plhs[4],0,fieldnames[1],mxCreateDoubleMatrix(NOUT[3]*NMEAS[3],ACADO_NX,mxREAL));
                    mxSetField(plhs[4],0,fieldnames[2],mxCreateDoubleMatrix(NOUT[3]*NMEAS[3],ACADO_NU,mxREAL));

                    xnext = mxGetPr(mxGetField(plhs[4],0,fieldnames[0]));
                    sensX = mxGetPr(mxGetField(plhs[4],0,fieldnames[1]));
                    sensU = mxGetPr(mxGetField(plhs[4],0,fieldnames[2]));

                    for( k = 0; k < NMEAS[3]; ++k ) {
                        for( i = 0; i < NOUT[3]; ++i ) {
                            xnext[k*NOUT[3]+i] = out4[k*NOUT[3]*(1+ACADO_NX+ACADO_NU)+i];
                        }
                    }

                    /* NOTE: Matlab is column-major, while C is row-major order !! */
                    for( k = 0; k < NMEAS[3]; ++k ) {
                        for( i = 0; i < NOUT[3]; ++i ) {
                            for( j = 0; j < ACADO_NX; ++j ) {
                                sensX[j*NOUT[3]*NMEAS[3]+k*NOUT[3]+i] = out4[k*NOUT[3]*(1+ACADO_NX+ACADO_NU)+NOUT[3]+i*ACADO_NX+j];
                            }
                        }
                    }
                    for( k = 0; k < NMEAS[3]; ++k ) {
                        for( i = 0; i < NOUT[3]; ++i ) {
                            for( j = 0; j < ACADO_NU; ++j ) {
                                sensU[j*NOUT[3]*NMEAS[3]+k*NOUT[3]+i] = out4[k*NOUT[3]*(1+ACADO_NX+ACADO_NU)+NOUT[3]*(1+ACADO_NX)+i*ACADO_NU+j];
                            }
                        }
                    }
                }
                #endif
            }
            #endif
        }
        #endif
    }
    #endif
}
