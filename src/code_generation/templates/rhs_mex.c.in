#include "mex.h"

/* GLOBAL VARIABLES FOR THE ACADO REAL-TIME ALGORITHM: */
/* --------------------------------------------------- */
   ACADOvariables acadoVariables;
   ACADOworkspace acadoWorkspace;

void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {

    int i;
    int Nx, Nt, Nu;
    real_t *f, *x, *u;
    real_t y[ACADO_NX+ACADO_NXA+ACADO_NU+ACADO_NDX];
    
    if (nrhs != 3) {
        mexErrMsgTxt( "Check the number of input arguments !!" );
    }
    if (nlhs > 1) {
        mexErrMsgTxt( "Check the number of output arguments !!" );
    }
    
    Nt = mxGetM(prhs[0])*mxGetN(prhs[0]);
    Nx = mxGetM(prhs[1])*mxGetN(prhs[1]);
    Nu = mxGetM(prhs[2])*mxGetN(prhs[2]);
    
    if (Nt != 1) {
        mexErrMsgTxt( "Check the dimension of the first input argument !!" );
    }
    if (Nx != ACADO_NX+ACADO_NXA+ACADO_NDX) {
        mexErrMsgTxt( "Check the dimension of the second input argument !!" );
    }
    if (Nu != ACADO_NU) {
        mexErrMsgTxt( "Check the dimension of the third input argument !!" );
    }
    
    x = mxGetPr(prhs[1]);
    u = mxGetPr(prhs[2]);
    for( i = 0; i < ACADO_NX+ACADO_NXA; ++i ) {
        y[i] = x[i];
    }
    for( i = 0; i < ACADO_NU; ++i ) {
        y[ACADO_NX+ACADO_NXA+i] = u[i];
    }
    for( i = 0; i < ACADO_NDX; ++i ) {
        y[ACADO_NX+ACADO_NXA+ACADO_NU+i] = x[ACADO_NX+ACADO_NXA+i];
    }
    
    plhs[0] = mxCreateDoubleMatrix(ACADO_NX+ACADO_NXA+ACADO_NDX,1,mxREAL);
    f = mxGetPr(plhs[0]);
    
    @ACADO_RHS@( y,f );

    for( i = 0; i < ACADO_NDX; ++i ) {
        f[ACADO_NX+ACADO_NXA+i] = f[i];
    }
    for( i = 0; i < ACADO_NDX; ++i ) {
        f[i] = x[ACADO_NX+ACADO_NXA+i];
    }
}

